package com.hermes.model.dao;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.hermes.model.Board;
import com.hermes.model.ItemBoard;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table ITEM_BOARD.
 */
public class ItemBoardDao extends AbstractDao<ItemBoard, Long> {

	public static final String TABLENAME = "ITEM_BOARD";

	/**
	 * Properties of entity ItemBoard.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property BoardId = new Property(1, long.class,
				"boardId", false, "BOARD_ID");
		public final static Property PathSound = new Property(2, String.class,
				"pathSound", false, "PATH_SOUND");
		public final static Property PathImage = new Property(3, String.class,
				"pathImage", false, "PATH_IMAGE");
	};

	private DaoSession daoSession;

	private Query<ItemBoard> board_ItemBoardListQuery;

	public ItemBoardDao(DaoConfig config) {
		super(config);
	}

	public ItemBoardDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	public static ItemBoardDao create() {
		return Database.session().getItemBoardDao();
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'ITEM_BOARD' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'BOARD_ID' INTEGER NOT NULL ," + // 1: boardId
				"'PATH_SOUND' TEXT NOT NULL ," + // 2: pathSound
				"'PATH_IMAGE' TEXT NOT NULL );"); // 3: pathImage
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'ITEM_BOARD'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, ItemBoard entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindLong(2, entity.getBoardId());
		stmt.bindString(3, entity.getPathSound());
		stmt.bindString(4, entity.getPathImage());
	}

	@Override
	protected void attachEntity(ItemBoard entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public ItemBoard readEntity(Cursor cursor, int offset) {
		ItemBoard entity = new ItemBoard( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getLong(offset + 1), // boardId
				cursor.getString(offset + 2), // pathSound
				cursor.getString(offset + 3) // pathImage
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, ItemBoard entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setBoardId(cursor.getLong(offset + 1));
		entity.setPathSound(cursor.getString(offset + 2));
		entity.setPathImage(cursor.getString(offset + 3));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(ItemBoard entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(ItemBoard entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Internal query to resolve the "itemBoardList" to-many relationship of
	 * Board.
	 */
	public List<ItemBoard> _queryBoard_ItemBoardList(long boardId) {
		synchronized (this) {
			if (board_ItemBoardListQuery == null) {
				QueryBuilder<ItemBoard> queryBuilder = queryBuilder();
				queryBuilder.where(Properties.BoardId.eq(null));
				board_ItemBoardListQuery = queryBuilder.build();
			}
		}
		Query<ItemBoard> query = board_ItemBoardListQuery.forCurrentThread();
		query.setParameter(0, boardId);
		return query.list();
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getBoardDao()
					.getAllColumns());
			builder.append(" FROM ITEM_BOARD T");
			builder.append(" LEFT JOIN BOARD T0 ON T.'BOARD_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected ItemBoard loadCurrentDeep(Cursor cursor, boolean lock) {
		ItemBoard entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		Board board = loadCurrentOther(daoSession.getBoardDao(), cursor, offset);
		if (board != null) {
			entity.setBoard(board);
		}

		return entity;
	}

	public ItemBoard loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[] { key.toString() };
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	public List<ItemBoard> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<ItemBoard> list = new ArrayList<ItemBoard>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<ItemBoard> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<ItemBoard> queryDeep(String where, String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
